local nk = require("nakama")

-- –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
local function match_init(context, params)
    nk.logger_info("–ü–æ–ª—É—á–µ–Ω–æ ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞: ")

    local state = {}
    return state, 1, "PVP2p_match" -- <== –≤–∞–∂–Ω–æ: –¢–†–ï–¢–ò–ô –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –°–¢–†–û–ö–ê
end

local function match_join_attempt(context, dispatcher, tick, state, presence, metadata)
   nk.logger_info("–ò–≥—Ä–æ–∫–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏ —Ç—É—Çüì¶")
	-- Presence format:
	-- {
	--   user_id = "user unique ID",
	--   session_id = "session ID of the user's current connection",
	--   username = "user's unique username",
	--   node = "name of the Nakama node the user is connected to"
	-- }

	return state, true
  end

-- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
local function match_join(context, dispatcher, tick, state, presences)

    return state
end

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
local function match_receive(context, dispatcher, tick, state, presence, op_code, data)
  nk.logger_info("–ü–æ–ª—É—á–µ–Ω–æ üé∂üé∂üé∂üé∂üé∂üé∂ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞: ")

  if op_code == 1 then
       -- nk.logger_info("–ü–æ–ª—É—á–µ–Ω–æ ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞: " .. presence.user_id .. " —Å –∫–æ–¥–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏: " .. op_code)
    end
  return state
end

-- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–æ–≤
local function match_tick(context, dispatcher, tick, state, messages)

  return state
end

-- –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
local function match_leave(context, dispatcher, tick, state, presences)

  return state
end

-- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞
local function match_terminate(context, dispatcher, tick, state, grace_seconds)
  return state
end

local function match_loop(context, dispatcher, tick, state, messages)

    return state
end

  local function match_signal(context, dispatcher, tick, state, data)

    return state
  end


return {
    match_init = match_init,
    match_join_attempt = match_join_attempt,
    match_join = match_join,
    match_receive = match_receive,
    match_tick = match_tick,
    match_leave = match_leave,
    match_terminate = match_terminate,
    match_loop = match_loop,
    match_signal = match_signal
  }
