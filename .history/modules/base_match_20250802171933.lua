local nk = require("nakama")

local function match_init(context, params)

    local state = {}

    return state, 1, "base_match" 
end

local function match_join_attempt(context, dispatcher, tick, state, presence, metadata)
    nk.logger_info("–ò–≥—Ä–æ–∫–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏–∏ —Ç—É—Çüì¶")

    return state, true
end


local function match_join(context, dispatcher, tick, state, presences)
    -- for _, presence in ipairs(presences) do
    --     local result = nk.storage_read({
    --         {
    --             collection = "active_leaderboard_backup",
    --             key = "player_data",
    --             user_id = presence.user_id, 
    --         }
    --     })
        
    --     if result and #result > 0 then
    --         for i, entry in ipairs(result) do
    --             nk.logger_info("üîç –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–ø–∏—Å—å #" .. i)
    --             nk.logger_info("üÜî key: " .. entry.key)
    --             nk.logger_info("üìö collection: " .. entry.collection)
    --             nk.logger_info("üë§ user_id: " .. entry.user_id)
    --             nk.logger_info("üì¶ value: " .. nk.json_encode(entry.value))

    --             nk.leaderboard_record_write({
    --                 leaderboard_id = "hour_active",
    --                 owner_id = entry.user_id,
    --                 score = entry.value.score
    --             })
    --         end
    --     else
    --         nk.logger_info("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞: " .. presence.user_id)
    --     end
    -- end

    
    return state
end

local function match_loop(context, dispatcher, tick, state, messages)
    return state
end


local function match_leave(context, dispatcher, tick, state, presences)
    -- for _, presence in ipairs(presences) do
    --     nk.logger_info("üëã –ò–≥—Ä–æ–∫ –ø–æ–∫–∏–¥–∞–µ—Ç –º–∞—Ç—á: " .. presence.user_id)

    --     nk.logger_info("üîé –ò—â–µ–º —Ä–µ–∫–æ—Ä–¥ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " .. presence.user_id)
    --     local result = nk.leaderboard_records_list("hour_active", {presence.user_id}, 1, nil)
    --     nk.logger_info("üß™ result (leaderboard_records_list): " .. nk.json_encode(result))

    --     local record

    --     if result and #result > 0 then
    --         record = result[1]
    --         nk.logger_info("‚úÖ –†–µ–∫–æ—Ä–¥ –Ω–∞–π–¥–µ–Ω:")
    --         nk.logger_info("üèÖ user_id: " .. record.owner_id)
    --         nk.logger_info("üè∑Ô∏è username: " .. record.username)
    --         nk.logger_info("üìä score: " .. record.score)
    --         nk.logger_info("ü•á rank: " .. record.rank)
    --         nk.logger_info("üì¶ metadata: " .. nk.json_encode(record.metadata))
    --     else
    --         nk.logger_info("‚ö†Ô∏è –†–µ–∫–æ—Ä–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å –≤ backup.")
    --         record = {} -- –∏–ª–∏ nil, –µ—Å–ª–∏ —Ç–∞–∫ –ª–æ–≥–∏—á–Ω–µ–µ
    --     end

    --     nk.logger_info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
    --     nk.storage_write({
    --         {
    --             collection = "active_leaderboard_backup",
    --             key = "player_data",
    --             user_id = presence.user_id, -- üëà –∑–¥–µ—Å—å —Ç–æ–∂–µ –ª—É—á—à–µ presence.user_id
    --             value = record
    --         }
    --     })

    --     nk.logger_info("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: " .. presence.user_id)
    --     nk.leaderboard_record_delete("hour_active", presence.user_id)
    -- end

    return state
end


local function match_terminate(context, dispatcher, tick, state, grace_seconds)
    return state
end


local function match_signal(context, dispatcher, tick, state, data)

    return state
end


return {
    match_init = match_init,
    match_join_attempt = match_join_attempt,
    match_join = match_join,
    match_leave = match_leave,
    match_terminate = match_terminate,
    match_loop = match_loop,
    match_signal = match_signal
}
