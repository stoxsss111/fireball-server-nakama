local nk = require("nakama")

-- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∫–æ–¥—ã –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
local EOpCode = {
    RequestOnlineCount = 11,
    OnlineCount = 22,
}

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–∞
local function match_init(context, params)
    -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ç—á–∞ —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    local state = {
        players = {}
    }

    nk.logger_info("üéÆ –ú–∞—Ç—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–≥—Ä–æ–∫–æ–≤: 0")

    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∏–∫—Ä–µ–π—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
    return state, 1, "base_match"
end

-- –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
local function match_join_attempt(context, dispatcher, tick, state, presence, metadata)
    -- –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É, —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    nk.logger_info("‚ûï –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞: " .. presence.user_id)
    
    -- –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥
    return state, true
end

-- –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
local function match_join(context, dispatcher, tick, state, presences)
    -- –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É state.players
    for _, p in ipairs(presences) do
        table.insert(state.players, p)
        nk.logger_info("üëç –ò–≥—Ä–æ–∫ " .. p.user_id .. " —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª.")
    end
    
    -- –õ–æ–≥–≥–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∞—Ç—á–µ
    nk.logger_info("üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –º–∞—Ç—á–µ: " .. tostring(#state.players))

    -- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞–º–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    -- for _, presence in ipairs(presences) do
    --     ...
    -- end
    
    return state
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–∞—Ç—á–∞
local function match_loop(context, dispatcher, tick, state, messages)
    -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
    for _, message in ipairs(messages) do
        local op_code = message.op_code
        local sender = message.sender

        -- –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–æ–∫–æ–≤
        if op_code == EOpCode.RequestOnlineCount then
            nk.logger_info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–Ω–ª–∞–π–Ω –æ—Ç –∏–≥—Ä–æ–∫–∞: " .. sender.user_id)

            -- –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã state.players
            local online_count = #state.players
            nk.logger_info("üìä –¢–µ–∫—É—â–∏–π –æ–Ω–ª–∞–π–Ω: " .. online_count)

            -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–º—É, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª
            dispatcher.broadcast_message(EOpCode.OnlineCount, nk.json_encode({count = online_count}), {sender})

            nk.logger_info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–Ω–ª–∞–π–Ω (" .. tostring(online_count) .. ") –∏–≥—Ä–æ–∫—É " .. sender.user_id)
        end
    end

    return state
end

-- –í—ã—Ö–æ–¥ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –º–∞—Ç—á–∞
local function match_leave(context, dispatcher, tick, state, presences)
    -- –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—ã—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    local leaving_user_ids = {}
    for _, p in ipairs(presences) do
        leaving_user_ids[p.user_id] = true
        nk.logger_info("üëã –ò–≥—Ä–æ–∫ " .. p.user_id .. " –ø–æ–∫–∏–¥–∞–µ—Ç –º–∞—Ç—á.")
    end

    -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ –≤—ã—à–µ–ª
    local remaining_players = {}
    for _, p in ipairs(state.players) do
        if not leaving_user_ids[p.user_id] then
            table.insert(remaining_players, p)
        end
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    state.players = remaining_players
    
    -- –õ–æ–≥–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    nk.logger_info("üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –º–∞—Ç—á–µ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞: " .. tostring(#state.players))

    -- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞–º–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    -- for _, presence in ipairs(presences) do
    --     ...
    -- end

    return state
end

-- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∞
local function match_terminate(context, dispatcher, tick, state, grace_seconds)
    nk.logger_info("üõë –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
    return state
end

-- –°–∏–≥–Ω–∞–ª—ã –º–∞—Ç—á–∞ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π)
local function match_signal(context, dispatcher, tick, state, data)
    return state
end

-- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è Nakama
return {
    match_init = match_init,
    match_join_attempt = match_join_attempt,
    match_join = match_join,
    match_leave = match_leave,
    match_terminate = match_terminate,
    match_loop = match_loop,
    match_signal = match_signal
}