local nk = require("nakama")
local match_module = ("match_module")

local M = {}

-- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–æ–∑–¥–∞—ë—Ç –º–∞—Ç—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç match_id
function M.create_match()



    local params = {
        start_time = os.time(),
        max_players = 20,
        team_size = 10,
        duration = 600,
        min_players = 10,
        player_join_time = 60
    }

    params.label = nk.json_encode(label_data)

    nk.logger_info("üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: " .. nk.json_encode(params))
    local match_id = nk.match_create(match_module, params)
    nk.logger_info("‚úÖ –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω! match_id: " .. match_id .. " üéâ")
    return match_id
end

-- RPC-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
function M.find_match(context, payload)
    local user_id = context.user_id
    nk.logger_info("üìû RPC –≤—ã–∑–æ–≤ 'find_match' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " .. (user_id or "nil"))

    if not user_id then
        nk.logger_error("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω ‚ùå")
        error("User not authenticated")
    end

    local current_time = os.time()
    nk.logger_info("‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " .. current_time)

    -- –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
    nk.logger_info("üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
    local matches = nk.match_list(10, true, nil, 1, nil, nil)
    nk.logger_info("üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: " .. tostring(#matches))

    local suitable_match = nil

    for _, match in ipairs(matches) do
        nk.logger_info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–∞: " .. nk.json_encode(match))
        local age_ok = match.start_time and ((current_time - match.start_time) <= match.player_join_time)
        local label = nk.json_decode(match.label)
    
    -- –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è isPrivate
    nk.logger_info("üß™–í–æ–∑—Ä–∞—Å—Ç –º–∞—Ç—á–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç: " .. tostring(label.isPrivate))
        
        local has_space = match.size and match.max_size and (match.size < match.max_size)
        nk.logger_info("üß™–í –º–∞—Ç—á–µ –µ—Å—Ç—å –º–µ—Å—Ç–æ: " .. tostring(match.max_size))

        if age_ok and has_space then
            suitable_match = match
            nk.logger_info("üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞—Ç—á –Ω–∞–π–¥–µ–Ω! match_id: " .. match.match_id)
            break
        end
    end

    local result = {}

    if suitable_match then
        result.match_id = suitable_match.match_id
        result.is_new = false
        nk.logger_info("ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–∞—Ç—á—É: " .. result.match_id)
    else
        result.match_id = M.create_match()
        result.is_new = true
        nk.logger_info("üåü –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: " .. result.match_id)
    end

    return nk.json_encode(result)
end

nk.register_rpc(M.find_match, "find_match")
nk.logger_info("üöÄ RPC 'find_match' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

return M